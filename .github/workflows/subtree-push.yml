# Workflow 이름 설정(Github Action의 인터페이스에서 Workflow 식별하는데 사용)
name: Push subtree

# on: 해당 Workflow를 트리거하는 이벤트 정의
  # push: Repository에 커밋이 푸시될 때 Workflow 실행
  # branches: 어떤 브랜치에서 Push가 발생해야 Workflow가 실행될지 정의
on:
  push:
    branches: master # 자식 Repository에서 사용하는 브렌치


# jobs: 실행할 작업을 정의
  # taskName(push-to-parents): 작업의 이름 / 나중에 쉽게 참조할 수 있도록 붙임(사용자 정의)
  # runs-on: 이 작업이 실행될 환경 정의(ubuntu-latest: 최신 우분투 환경에서 실행)
  # steps: 이 작업에서 수행할 개별 단계 나열
    # - name: 단계 이름(사용자 지정)
    # uses: 사용할 Github Action(actions/checkout@v2: Repository를 Checkout하는 액션)
    # with: Checkout할 Repository의 세부 정보 설정
      # repository: Repository를 지정 ({{ secrets.github.repository}} : 현재 실행 중인 리포진토리 경로)
      # token: 인증을 위한 토큰 / 'secrets.GITHUB_TOKEN'을 사용하여 GitHub에서 자동으로 생성되는 시크릿 키를 사용
      # path: 가상 환경 내에서 Repository를 어디에 Clone할 지 지정하는 경로
jobs: 
  push-to-parents:
    runs-on: ubuntu-latest
    steps:
    # 부모 리포지토리 체크아웃
    - name: Checkout the parent repository
      uses: actions/checkout@v2
      with:
        repository: PastelQ/Fundamentals  # 부모 리포지토리
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # 부모 리포지토리로 접근하기 위한 PAT
        path: parent_repo  # 부모 리포지토리를 가상 환경의 폴더로 클론

    # Git 사용자 정보 설정
    - name: Setup git user info
      run: |
        git config --global user.email "a0941@naver.com"
        git config --global user.name "PastelQ"

    # 자식 리포지토리와 히스토리 병합 (충돌 시 자식 리포지토리로 덮어쓰기)
    - name: Merge child repository history
      run: |
        cd parent_repo
        git remote add child https://github.com/PastelQ/Java.git  # 자식 리포지토리 URL
        git fetch child
        git merge -X theirs child/master --allow-unrelated-histories  # 충돌 발생 시 자식 리포지토리의 변경 사항으로 덮어쓰기

    # 서브트리 Pull
    - name: Pull from child repository
      run: |
        cd parent_repo
        git subtree pull --prefix=Java child master  # 서브트리 병합

    # 부모 리포지토리로 Push
    - name: Push to parent repository
      run: |
        cd parent_repo
        git push origin main  # 부모 리포지토리의 main 브랜치로 푸시
